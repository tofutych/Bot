import telebot
from telebot import types
import datetime
from random import choice

bot = telebot.TeleBot("1315033058:AAG6690TbiPaH5f20LJrwnUMHe4r1QCC2P0")
days = {
    0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    1: "–í—Ç–æ—Ä–Ω–∏–∫",
    2: "–°—Ä–µ–¥–∞",
    3: "–ß–µ—Ç–≤–µ—Ä–≥",
    4: "–ü—è—Ç–Ω–∏—Ü–∞",
    5: "–°—É–±–±–æ—Ç–∞",
    6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}
activity_numerator = {
    "0_0": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n1.\n2. [9:40] –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–µ –Ø–ü üìí\n3. –û—Å–Ω–æ–≤—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏üí°",
    "0_1": "–í—Ç–æ—Ä–Ω–∏–∫\n1. [8:00] –û—Å–Ω–æ–≤—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ üí°\n2. –û—Å–Ω–æ–≤—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ üìí",
    "0_2": "–°—Ä–µ–¥–∞\n1.\n2. [9:40] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π üìçüìí\n3. –§–∏–∑—Ä–∞ üèê\n4. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏ üí°\n5. –û—Å–Ω–æ–≤—ã –∫–æ–º–ø. –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∏ üìí",
    "0_3": "–ß–µ—Ç–≤–µ—Ä–≥\n1.\n2.\n3. [11:30] –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏ üí°\n4. –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã üí°\n5. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏ üìí",
    "0_4": "–ü—è—Ç–Ω–∏—Ü–∞\n1.\n2.\n3.\n4. [13:10] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å üìí\n5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π üí°\n6. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏ üìí\n7. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å üí°",
    "0_7": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n1.\n2. [9:40] –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–µ –Ø–ü üí°\n3. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–µ –Ø–ü üí°\n4. –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã üí°"  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è

}
activity_denominator = {
    "1_0": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n1.\n2. [9:40] –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–µ –Ø–ü üí°\n3. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–µ –Ø–ü üí°\n4. –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã üí°",
    "1_1": "–í—Ç–æ—Ä–Ω–∏–∫\n1. [8:00] –û—Å–Ω–æ–≤—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ üí°\n2. –û—Å–Ω–æ–≤—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏ üìí",
    "1_2": "–°—Ä–µ–¥–∞\n1. [8:00] –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–µ –Ø–ü üí°\n2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π üìçüìí\n3. –§–∏–∑—Ä–∞ üèê\n4. –û—Å–Ω–æ–≤—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∏ üìçüìí",
    "1_3": "–ß–µ—Ç–≤–µ—Ä–≥\n1.\n2.\n3. [11:30] –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã üí°\n4. –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã üí°\n5. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏ üìí",
    "1_4": "–ü—è—Ç–Ω–∏—Ü–∞\n1.\n2. [9:40] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π üí°\n3. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏ üí°\n4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å üìí\n5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å üí°\n6. –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ üí°",
    "1_7": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n1.\n2. [9:40] –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–µ –Ø–ü üìí\n3. –û—Å–Ω–æ–≤—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏üí°"  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —á–∏—Å–ª–∏—Ç–µ–ª—è
}
eblan = ["–Ø", "–¢—ã"]


@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, f"–í—ã–±–∏—Ä–∞–π, {message.chat.first_name}!", reply_markup=start_keyboard())


def start_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)

    button1 = types.InlineKeyboardButton(text="–ß–∏—Å–ª–∏—Ç–µ–ª—å",
                                         callback_data="numerator")

    button2 = types.InlineKeyboardButton(text="–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å",
                                         callback_data="denominator")

    button3 = types.InlineKeyboardButton(text="–ù–∞ —Å–µ–≥–æ–¥–Ω—è",
                                         callback_data="today")

    button4 = types.InlineKeyboardButton(text="–ù–∞ –∑–∞–≤—Ç—Ä–∞",
                                         callback_data="tomorrow")
    button5 = types.InlineKeyboardButton(text="–ö—Ç–æ –µ–±–ª–∞–Ω?",
                                         callback_data="eblan")

    keyboard.add(button1, button2)
    keyboard.add(button3)
    keyboard.add(button4)
    keyboard.add(button5)
    return keyboard


def days_keyboard_0():
    keyboard = types.InlineKeyboardMarkup(row_width=2)

    button0 = types.InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                                         callback_data="0_0")

    button1 = types.InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫",
                                         callback_data="0_1")

    button2 = types.InlineKeyboardButton(text="–°—Ä–µ–¥–∞",
                                         callback_data="0_2")

    button3 = types.InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥",
                                         callback_data="0_3")

    button4 = types.InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞",
                                         callback_data="0_4")

    button5 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©",
                                         callback_data="main_menu")

    keyboard.add(button0, button1)
    keyboard.add(button2, button3)
    keyboard.add(button4, button5)
    return keyboard


def result_keyboard_0():
    keyboard = types.InlineKeyboardMarkup(row_width=1)

    button0 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back0")

    button1 = types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                         callback_data="main_menu")

    keyboard.add(button0, button1)
    return keyboard


def days_keyboard_1():
    keyboard = types.InlineKeyboardMarkup(row_width=2)

    button0 = types.InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                                         callback_data="1_0")

    button1 = types.InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫",
                                         callback_data="1_1")

    button2 = types.InlineKeyboardButton(text="–°—Ä–µ–¥–∞",
                                         callback_data="1_2")

    button3 = types.InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥",
                                         callback_data="1_3")

    button4 = types.InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞",
                                         callback_data="1_4")

    button5 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©",
                                         callback_data="main_menu")

    keyboard.add(button0, button1)
    keyboard.add(button2, button3)
    keyboard.add(button4, button5)
    return keyboard


def result_keyboard_1():
    keyboard = types.InlineKeyboardMarkup(row_width=1)

    button0 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back1")

    button1 = types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                         callback_data="main_menu")

    keyboard.add(button0, button1)
    return keyboard


def today_tomorrow_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.add(button1)
    return keyboard


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data == "main_menu":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=f"–í—ã–±–∏—Ä–∞–π, {call.message.chat.first_name}!",
                              reply_markup=start_keyboard())

    if call.data == "back0":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ —á–∏—Å–ª–∏—Ç–µ–ª—é?",
                              reply_markup=days_keyboard_0())

    if call.data == "back1":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é?",
                              reply_markup=days_keyboard_1())

    if call.data == "numerator":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ —á–∏—Å–ª–∏—Ç–µ–ª—é?",
                              reply_markup=days_keyboard_0())

    if call.data == "denominator":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é?",
                              reply_markup=days_keyboard_1())

    if call.data[0] == "0":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=activity_numerator.get(call.data),
                              reply_markup=result_keyboard_0())

    if call.data[0] == "1":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=activity_denominator.get(call.data),
                              reply_markup=result_keyboard_1())

    if call.data == "today":
        if datetime.datetime.today().weekday() == (5 or 6):
            bot.answer_callback_query(call.id, "–î–æ–ª–±–∞–µ–±, —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π")
        else:
            if datetime.datetime.now().isocalendar()[1] % 2 == 0:
                numerator_key = "0_" + str(datetime.datetime.today().weekday())
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text=activity_numerator.get(numerator_key),
                                      reply_markup=today_tomorrow_keyboard())
            else:
                denominator_key = "1_" + str(datetime.datetime.today().weekday())
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text=activity_denominator.get(denominator_key),
                                      reply_markup=today_tomorrow_keyboard())

    if call.data == "tomorrow":
        if datetime.datetime.today().weekday() + 1 == (5 or 6):
            bot.answer_callback_query(call.id, "–î–æ–ª–±–∞–µ–±, –∑–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π")
        else:
            if datetime.datetime.now().isocalendar()[1] % 2 == 0:
                numerator_key = "0_" + str(datetime.datetime.today().weekday() + 1)
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text=activity_numerator.get(numerator_key),
                                      reply_markup=today_tomorrow_keyboard())
            else:
                denominator_key = "1_" + str(datetime.datetime.today().weekday() + 1)
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text=activity_denominator.get(denominator_key),
                                      reply_markup=today_tomorrow_keyboard())

    if call.data == "eblan":
        bot.answer_callback_query(call.id, choice(eblan))
        photo = open('/tmp/photo.png', 'rb')


if __name__ == '__main__':
    bot.polling(none_stop=True)
